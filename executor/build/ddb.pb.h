// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ddb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ddb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ddb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ddb_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ddb_2eproto;
namespace ddb {
class ExecuteNode;
struct ExecuteNodeDefaultTypeInternal;
extern ExecuteNodeDefaultTypeInternal _ExecuteNode_default_instance_;
class ExecuteTree;
struct ExecuteTreeDefaultTypeInternal;
extern ExecuteTreeDefaultTypeInternal _ExecuteTree_default_instance_;
class QueryNode;
struct QueryNodeDefaultTypeInternal;
extern QueryNodeDefaultTypeInternal _QueryNode_default_instance_;
class QueryTree;
struct QueryTreeDefaultTypeInternal;
extern QueryTreeDefaultTypeInternal _QueryTree_default_instance_;
class ResultPath;
struct ResultPathDefaultTypeInternal;
extern ResultPathDefaultTypeInternal _ResultPath_default_instance_;
class ResultSet;
struct ResultSetDefaultTypeInternal;
extern ResultSetDefaultTypeInternal _ResultSet_default_instance_;
}  // namespace ddb
PROTOBUF_NAMESPACE_OPEN
template<> ::ddb::ExecuteNode* Arena::CreateMaybeMessage<::ddb::ExecuteNode>(Arena*);
template<> ::ddb::ExecuteTree* Arena::CreateMaybeMessage<::ddb::ExecuteTree>(Arena*);
template<> ::ddb::QueryNode* Arena::CreateMaybeMessage<::ddb::QueryNode>(Arena*);
template<> ::ddb::QueryTree* Arena::CreateMaybeMessage<::ddb::QueryTree>(Arena*);
template<> ::ddb::ResultPath* Arena::CreateMaybeMessage<::ddb::ResultPath>(Arena*);
template<> ::ddb::ResultSet* Arena::CreateMaybeMessage<::ddb::ResultSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ddb {

// ===================================================================

class QueryNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddb.QueryNode) */ {
 public:
  inline QueryNode() : QueryNode(nullptr) {}
  ~QueryNode() override;
  explicit PROTOBUF_CONSTEXPR QueryNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNode(const QueryNode& from);
  QueryNode(QueryNode&& from) noexcept
    : QueryNode() {
    *this = ::std::move(from);
  }

  inline QueryNode& operator=(const QueryNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNode& operator=(QueryNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNode* internal_default_instance() {
    return reinterpret_cast<const QueryNode*>(
               &_QueryNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryNode& a, QueryNode& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNode& from) {
    QueryNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddb.QueryNode";
  }
  protected:
  explicit QueryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 2,
    kSqlStatementFieldNumber = 4,
    kIdFieldNumber = 1,
    kParentFieldNumber = 3,
    kSiteFieldNumber = 5,
  };
  // repeated int32 children = 2;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  int32_t _internal_children(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_children() const;
  void _internal_add_children(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_children();
  public:
  int32_t children(int index) const;
  void set_children(int index, int32_t value);
  void add_children(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_children();

  // string sql_statement = 4;
  void clear_sql_statement();
  const std::string& sql_statement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sql_statement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sql_statement();
  PROTOBUF_NODISCARD std::string* release_sql_statement();
  void set_allocated_sql_statement(std::string* sql_statement);
  private:
  const std::string& _internal_sql_statement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sql_statement(const std::string& value);
  std::string* _internal_mutable_sql_statement();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 parent = 3;
  void clear_parent();
  int32_t parent() const;
  void set_parent(int32_t value);
  private:
  int32_t _internal_parent() const;
  void _internal_set_parent(int32_t value);
  public:

  // int32 site = 5;
  void clear_site();
  int32_t site() const;
  void set_site(int32_t value);
  private:
  int32_t _internal_site() const;
  void _internal_set_site(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ddb.QueryNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > children_;
    mutable std::atomic<int> _children_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sql_statement_;
    int32_t id_;
    int32_t parent_;
    int32_t site_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddb_2eproto;
};
// -------------------------------------------------------------------

class QueryTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddb.QueryTree) */ {
 public:
  inline QueryTree() : QueryTree(nullptr) {}
  ~QueryTree() override;
  explicit PROTOBUF_CONSTEXPR QueryTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTree(const QueryTree& from);
  QueryTree(QueryTree&& from) noexcept
    : QueryTree() {
    *this = ::std::move(from);
  }

  inline QueryTree& operator=(const QueryTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTree& operator=(QueryTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTree* internal_default_instance() {
    return reinterpret_cast<const QueryTree*>(
               &_QueryTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryTree& a, QueryTree& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTree& from) {
    QueryTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddb.QueryTree";
  }
  protected:
  explicit QueryTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 3,
    kTreeIdFieldNumber = 1,
    kRootFieldNumber = 2,
  };
  // repeated .ddb.QueryNode Nodes = 3;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::ddb::QueryNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::QueryNode >*
      mutable_nodes();
  private:
  const ::ddb::QueryNode& _internal_nodes(int index) const;
  ::ddb::QueryNode* _internal_add_nodes();
  public:
  const ::ddb::QueryNode& nodes(int index) const;
  ::ddb::QueryNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::QueryNode >&
      nodes() const;

  // int32 tree_id = 1;
  void clear_tree_id();
  int32_t tree_id() const;
  void set_tree_id(int32_t value);
  private:
  int32_t _internal_tree_id() const;
  void _internal_set_tree_id(int32_t value);
  public:

  // int32 root = 2;
  void clear_root();
  int32_t root() const;
  void set_root(int32_t value);
  private:
  int32_t _internal_root() const;
  void _internal_set_root(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ddb.QueryTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::QueryNode > nodes_;
    int32_t tree_id_;
    int32_t root_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddb_2eproto;
};
// -------------------------------------------------------------------

class ExecuteNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddb.ExecuteNode) */ {
 public:
  inline ExecuteNode() : ExecuteNode(nullptr) {}
  ~ExecuteNode() override;
  explicit PROTOBUF_CONSTEXPR ExecuteNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteNode(const ExecuteNode& from);
  ExecuteNode(ExecuteNode&& from) noexcept
    : ExecuteNode() {
    *this = ::std::move(from);
  }

  inline ExecuteNode& operator=(const ExecuteNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteNode& operator=(ExecuteNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteNode* internal_default_instance() {
    return reinterpret_cast<const ExecuteNode*>(
               &_ExecuteNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExecuteNode& a, ExecuteNode& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecuteNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecuteNode& from) {
    ExecuteNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddb.ExecuteNode";
  }
  protected:
  explicit ExecuteNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 4,
    kResFieldNumber = 3,
    kVolFieldNumber = 2,
    kIdFieldNumber = 1,
    kParentFieldNumber = 5,
    kTimeSpendFieldNumber = 7,
    kSiteFieldNumber = 6,
  };
  // repeated int32 children = 4;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  private:
  int32_t _internal_children(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_children() const;
  void _internal_add_children(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_children();
  public:
  int32_t children(int index) const;
  void set_children(int index, int32_t value);
  void add_children(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      children() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_children();

  // string res = 3;
  void clear_res();
  const std::string& res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res();
  PROTOBUF_NODISCARD std::string* release_res();
  void set_allocated_res(std::string* res);
  private:
  const std::string& _internal_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res(const std::string& value);
  std::string* _internal_mutable_res();
  public:

  // int64 vol = 2;
  void clear_vol();
  int64_t vol() const;
  void set_vol(int64_t value);
  private:
  int64_t _internal_vol() const;
  void _internal_set_vol(int64_t value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 parent = 5;
  void clear_parent();
  int32_t parent() const;
  void set_parent(int32_t value);
  private:
  int32_t _internal_parent() const;
  void _internal_set_parent(int32_t value);
  public:

  // double time_spend = 7;
  void clear_time_spend();
  double time_spend() const;
  void set_time_spend(double value);
  private:
  double _internal_time_spend() const;
  void _internal_set_time_spend(double value);
  public:

  // int32 site = 6;
  void clear_site();
  int32_t site() const;
  void set_site(int32_t value);
  private:
  int32_t _internal_site() const;
  void _internal_set_site(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ddb.ExecuteNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > children_;
    mutable std::atomic<int> _children_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
    int64_t vol_;
    int32_t id_;
    int32_t parent_;
    double time_spend_;
    int32_t site_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddb_2eproto;
};
// -------------------------------------------------------------------

class ExecuteTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddb.ExecuteTree) */ {
 public:
  inline ExecuteTree() : ExecuteTree(nullptr) {}
  ~ExecuteTree() override;
  explicit PROTOBUF_CONSTEXPR ExecuteTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteTree(const ExecuteTree& from);
  ExecuteTree(ExecuteTree&& from) noexcept
    : ExecuteTree() {
    *this = ::std::move(from);
  }

  inline ExecuteTree& operator=(const ExecuteTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteTree& operator=(ExecuteTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteTree& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteTree* internal_default_instance() {
    return reinterpret_cast<const ExecuteTree*>(
               &_ExecuteTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecuteTree& a, ExecuteTree& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecuteTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecuteTree& from) {
    ExecuteTree::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddb.ExecuteTree";
  }
  protected:
  explicit ExecuteTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 3,
    kTreeIdFieldNumber = 1,
    kRootFieldNumber = 2,
  };
  // repeated .ddb.ExecuteNode Nodes = 3;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::ddb::ExecuteNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::ExecuteNode >*
      mutable_nodes();
  private:
  const ::ddb::ExecuteNode& _internal_nodes(int index) const;
  ::ddb::ExecuteNode* _internal_add_nodes();
  public:
  const ::ddb::ExecuteNode& nodes(int index) const;
  ::ddb::ExecuteNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::ExecuteNode >&
      nodes() const;

  // int32 tree_id = 1;
  void clear_tree_id();
  int32_t tree_id() const;
  void set_tree_id(int32_t value);
  private:
  int32_t _internal_tree_id() const;
  void _internal_set_tree_id(int32_t value);
  public:

  // int32 root = 2;
  void clear_root();
  int32_t root() const;
  void set_root(int32_t value);
  private:
  int32_t _internal_root() const;
  void _internal_set_root(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ddb.ExecuteTree)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::ExecuteNode > nodes_;
    int32_t tree_id_;
    int32_t root_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddb_2eproto;
};
// -------------------------------------------------------------------

class ResultPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddb.ResultPath) */ {
 public:
  inline ResultPath() : ResultPath(nullptr) {}
  ~ResultPath() override;
  explicit PROTOBUF_CONSTEXPR ResultPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultPath(const ResultPath& from);
  ResultPath(ResultPath&& from) noexcept
    : ResultPath() {
    *this = ::std::move(from);
  }

  inline ResultPath& operator=(const ResultPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultPath& operator=(ResultPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultPath* internal_default_instance() {
    return reinterpret_cast<const ResultPath*>(
               &_ResultPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResultPath& a, ResultPath& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultPath& from) {
    ResultPath::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddb.ResultPath";
  }
  protected:
  explicit ResultPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcPathFieldNumber = 1,
    kTargetPathFieldNumber = 2,
  };
  // string src_path = 1;
  void clear_src_path();
  const std::string& src_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src_path();
  PROTOBUF_NODISCARD std::string* release_src_path();
  void set_allocated_src_path(std::string* src_path);
  private:
  const std::string& _internal_src_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src_path(const std::string& value);
  std::string* _internal_mutable_src_path();
  public:

  // string target_path = 2;
  void clear_target_path();
  const std::string& target_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_path();
  PROTOBUF_NODISCARD std::string* release_target_path();
  void set_allocated_target_path(std::string* target_path);
  private:
  const std::string& _internal_target_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_path(const std::string& value);
  std::string* _internal_mutable_target_path();
  public:

  // @@protoc_insertion_point(class_scope:ddb.ResultPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddb_2eproto;
};
// -------------------------------------------------------------------

class ResultSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ddb.ResultSet) */ {
 public:
  inline ResultSet() : ResultSet(nullptr) {}
  ~ResultSet() override;
  explicit PROTOBUF_CONSTEXPR ResultSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultSet(const ResultSet& from);
  ResultSet(ResultSet&& from) noexcept
    : ResultSet() {
    *this = ::std::move(from);
  }

  inline ResultSet& operator=(const ResultSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultSet& operator=(ResultSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultSet* internal_default_instance() {
    return reinterpret_cast<const ResultSet*>(
               &_ResultSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResultSet& a, ResultSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultSet& from) {
    ResultSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ddb.ResultSet";
  }
  protected:
  explicit ResultSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:ddb.ResultSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ddb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryNode

// int32 id = 1;
inline void QueryNode::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t QueryNode::_internal_id() const {
  return _impl_.id_;
}
inline int32_t QueryNode::id() const {
  // @@protoc_insertion_point(field_get:ddb.QueryNode.id)
  return _internal_id();
}
inline void QueryNode::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void QueryNode::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ddb.QueryNode.id)
}

// repeated int32 children = 2;
inline int QueryNode::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int QueryNode::children_size() const {
  return _internal_children_size();
}
inline void QueryNode::clear_children() {
  _impl_.children_.Clear();
}
inline int32_t QueryNode::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline int32_t QueryNode::children(int index) const {
  // @@protoc_insertion_point(field_get:ddb.QueryNode.children)
  return _internal_children(index);
}
inline void QueryNode::set_children(int index, int32_t value) {
  _impl_.children_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddb.QueryNode.children)
}
inline void QueryNode::_internal_add_children(int32_t value) {
  _impl_.children_.Add(value);
}
inline void QueryNode::add_children(int32_t value) {
  _internal_add_children(value);
  // @@protoc_insertion_point(field_add:ddb.QueryNode.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QueryNode::_internal_children() const {
  return _impl_.children_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
QueryNode::children() const {
  // @@protoc_insertion_point(field_list:ddb.QueryNode.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QueryNode::_internal_mutable_children() {
  return &_impl_.children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
QueryNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:ddb.QueryNode.children)
  return _internal_mutable_children();
}

// int32 parent = 3;
inline void QueryNode::clear_parent() {
  _impl_.parent_ = 0;
}
inline int32_t QueryNode::_internal_parent() const {
  return _impl_.parent_;
}
inline int32_t QueryNode::parent() const {
  // @@protoc_insertion_point(field_get:ddb.QueryNode.parent)
  return _internal_parent();
}
inline void QueryNode::_internal_set_parent(int32_t value) {
  
  _impl_.parent_ = value;
}
inline void QueryNode::set_parent(int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ddb.QueryNode.parent)
}

// string sql_statement = 4;
inline void QueryNode::clear_sql_statement() {
  _impl_.sql_statement_.ClearToEmpty();
}
inline const std::string& QueryNode::sql_statement() const {
  // @@protoc_insertion_point(field_get:ddb.QueryNode.sql_statement)
  return _internal_sql_statement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryNode::set_sql_statement(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sql_statement_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ddb.QueryNode.sql_statement)
}
inline std::string* QueryNode::mutable_sql_statement() {
  std::string* _s = _internal_mutable_sql_statement();
  // @@protoc_insertion_point(field_mutable:ddb.QueryNode.sql_statement)
  return _s;
}
inline const std::string& QueryNode::_internal_sql_statement() const {
  return _impl_.sql_statement_.Get();
}
inline void QueryNode::_internal_set_sql_statement(const std::string& value) {
  
  _impl_.sql_statement_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNode::_internal_mutable_sql_statement() {
  
  return _impl_.sql_statement_.Mutable(GetArenaForAllocation());
}
inline std::string* QueryNode::release_sql_statement() {
  // @@protoc_insertion_point(field_release:ddb.QueryNode.sql_statement)
  return _impl_.sql_statement_.Release();
}
inline void QueryNode::set_allocated_sql_statement(std::string* sql_statement) {
  if (sql_statement != nullptr) {
    
  } else {
    
  }
  _impl_.sql_statement_.SetAllocated(sql_statement, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sql_statement_.IsDefault()) {
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ddb.QueryNode.sql_statement)
}

// int32 site = 5;
inline void QueryNode::clear_site() {
  _impl_.site_ = 0;
}
inline int32_t QueryNode::_internal_site() const {
  return _impl_.site_;
}
inline int32_t QueryNode::site() const {
  // @@protoc_insertion_point(field_get:ddb.QueryNode.site)
  return _internal_site();
}
inline void QueryNode::_internal_set_site(int32_t value) {
  
  _impl_.site_ = value;
}
inline void QueryNode::set_site(int32_t value) {
  _internal_set_site(value);
  // @@protoc_insertion_point(field_set:ddb.QueryNode.site)
}

// -------------------------------------------------------------------

// QueryTree

// int32 tree_id = 1;
inline void QueryTree::clear_tree_id() {
  _impl_.tree_id_ = 0;
}
inline int32_t QueryTree::_internal_tree_id() const {
  return _impl_.tree_id_;
}
inline int32_t QueryTree::tree_id() const {
  // @@protoc_insertion_point(field_get:ddb.QueryTree.tree_id)
  return _internal_tree_id();
}
inline void QueryTree::_internal_set_tree_id(int32_t value) {
  
  _impl_.tree_id_ = value;
}
inline void QueryTree::set_tree_id(int32_t value) {
  _internal_set_tree_id(value);
  // @@protoc_insertion_point(field_set:ddb.QueryTree.tree_id)
}

// int32 root = 2;
inline void QueryTree::clear_root() {
  _impl_.root_ = 0;
}
inline int32_t QueryTree::_internal_root() const {
  return _impl_.root_;
}
inline int32_t QueryTree::root() const {
  // @@protoc_insertion_point(field_get:ddb.QueryTree.root)
  return _internal_root();
}
inline void QueryTree::_internal_set_root(int32_t value) {
  
  _impl_.root_ = value;
}
inline void QueryTree::set_root(int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:ddb.QueryTree.root)
}

// repeated .ddb.QueryNode Nodes = 3;
inline int QueryTree::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int QueryTree::nodes_size() const {
  return _internal_nodes_size();
}
inline void QueryTree::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::ddb::QueryNode* QueryTree::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:ddb.QueryTree.Nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::QueryNode >*
QueryTree::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:ddb.QueryTree.Nodes)
  return &_impl_.nodes_;
}
inline const ::ddb::QueryNode& QueryTree::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::ddb::QueryNode& QueryTree::nodes(int index) const {
  // @@protoc_insertion_point(field_get:ddb.QueryTree.Nodes)
  return _internal_nodes(index);
}
inline ::ddb::QueryNode* QueryTree::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::ddb::QueryNode* QueryTree::add_nodes() {
  ::ddb::QueryNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:ddb.QueryTree.Nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::QueryNode >&
QueryTree::nodes() const {
  // @@protoc_insertion_point(field_list:ddb.QueryTree.Nodes)
  return _impl_.nodes_;
}

// -------------------------------------------------------------------

// ExecuteNode

// int32 id = 1;
inline void ExecuteNode::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ExecuteNode::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ExecuteNode::id() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteNode.id)
  return _internal_id();
}
inline void ExecuteNode::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ExecuteNode::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteNode.id)
}

// int64 vol = 2;
inline void ExecuteNode::clear_vol() {
  _impl_.vol_ = int64_t{0};
}
inline int64_t ExecuteNode::_internal_vol() const {
  return _impl_.vol_;
}
inline int64_t ExecuteNode::vol() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteNode.vol)
  return _internal_vol();
}
inline void ExecuteNode::_internal_set_vol(int64_t value) {
  
  _impl_.vol_ = value;
}
inline void ExecuteNode::set_vol(int64_t value) {
  _internal_set_vol(value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteNode.vol)
}

// string res = 3;
inline void ExecuteNode::clear_res() {
  _impl_.res_.ClearToEmpty();
}
inline const std::string& ExecuteNode::res() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteNode.res)
  return _internal_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecuteNode::set_res(ArgT0&& arg0, ArgT... args) {
 
 _impl_.res_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ddb.ExecuteNode.res)
}
inline std::string* ExecuteNode::mutable_res() {
  std::string* _s = _internal_mutable_res();
  // @@protoc_insertion_point(field_mutable:ddb.ExecuteNode.res)
  return _s;
}
inline const std::string& ExecuteNode::_internal_res() const {
  return _impl_.res_.Get();
}
inline void ExecuteNode::_internal_set_res(const std::string& value) {
  
  _impl_.res_.Set(value, GetArenaForAllocation());
}
inline std::string* ExecuteNode::_internal_mutable_res() {
  
  return _impl_.res_.Mutable(GetArenaForAllocation());
}
inline std::string* ExecuteNode::release_res() {
  // @@protoc_insertion_point(field_release:ddb.ExecuteNode.res)
  return _impl_.res_.Release();
}
inline void ExecuteNode::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  _impl_.res_.SetAllocated(res, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.res_.IsDefault()) {
    _impl_.res_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ddb.ExecuteNode.res)
}

// repeated int32 children = 4;
inline int ExecuteNode::_internal_children_size() const {
  return _impl_.children_.size();
}
inline int ExecuteNode::children_size() const {
  return _internal_children_size();
}
inline void ExecuteNode::clear_children() {
  _impl_.children_.Clear();
}
inline int32_t ExecuteNode::_internal_children(int index) const {
  return _impl_.children_.Get(index);
}
inline int32_t ExecuteNode::children(int index) const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteNode.children)
  return _internal_children(index);
}
inline void ExecuteNode::set_children(int index, int32_t value) {
  _impl_.children_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteNode.children)
}
inline void ExecuteNode::_internal_add_children(int32_t value) {
  _impl_.children_.Add(value);
}
inline void ExecuteNode::add_children(int32_t value) {
  _internal_add_children(value);
  // @@protoc_insertion_point(field_add:ddb.ExecuteNode.children)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExecuteNode::_internal_children() const {
  return _impl_.children_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExecuteNode::children() const {
  // @@protoc_insertion_point(field_list:ddb.ExecuteNode.children)
  return _internal_children();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExecuteNode::_internal_mutable_children() {
  return &_impl_.children_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExecuteNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:ddb.ExecuteNode.children)
  return _internal_mutable_children();
}

// int32 parent = 5;
inline void ExecuteNode::clear_parent() {
  _impl_.parent_ = 0;
}
inline int32_t ExecuteNode::_internal_parent() const {
  return _impl_.parent_;
}
inline int32_t ExecuteNode::parent() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteNode.parent)
  return _internal_parent();
}
inline void ExecuteNode::_internal_set_parent(int32_t value) {
  
  _impl_.parent_ = value;
}
inline void ExecuteNode::set_parent(int32_t value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteNode.parent)
}

// int32 site = 6;
inline void ExecuteNode::clear_site() {
  _impl_.site_ = 0;
}
inline int32_t ExecuteNode::_internal_site() const {
  return _impl_.site_;
}
inline int32_t ExecuteNode::site() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteNode.site)
  return _internal_site();
}
inline void ExecuteNode::_internal_set_site(int32_t value) {
  
  _impl_.site_ = value;
}
inline void ExecuteNode::set_site(int32_t value) {
  _internal_set_site(value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteNode.site)
}

// double time_spend = 7;
inline void ExecuteNode::clear_time_spend() {
  _impl_.time_spend_ = 0;
}
inline double ExecuteNode::_internal_time_spend() const {
  return _impl_.time_spend_;
}
inline double ExecuteNode::time_spend() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteNode.time_spend)
  return _internal_time_spend();
}
inline void ExecuteNode::_internal_set_time_spend(double value) {
  
  _impl_.time_spend_ = value;
}
inline void ExecuteNode::set_time_spend(double value) {
  _internal_set_time_spend(value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteNode.time_spend)
}

// -------------------------------------------------------------------

// ExecuteTree

// int32 tree_id = 1;
inline void ExecuteTree::clear_tree_id() {
  _impl_.tree_id_ = 0;
}
inline int32_t ExecuteTree::_internal_tree_id() const {
  return _impl_.tree_id_;
}
inline int32_t ExecuteTree::tree_id() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteTree.tree_id)
  return _internal_tree_id();
}
inline void ExecuteTree::_internal_set_tree_id(int32_t value) {
  
  _impl_.tree_id_ = value;
}
inline void ExecuteTree::set_tree_id(int32_t value) {
  _internal_set_tree_id(value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteTree.tree_id)
}

// int32 root = 2;
inline void ExecuteTree::clear_root() {
  _impl_.root_ = 0;
}
inline int32_t ExecuteTree::_internal_root() const {
  return _impl_.root_;
}
inline int32_t ExecuteTree::root() const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteTree.root)
  return _internal_root();
}
inline void ExecuteTree::_internal_set_root(int32_t value) {
  
  _impl_.root_ = value;
}
inline void ExecuteTree::set_root(int32_t value) {
  _internal_set_root(value);
  // @@protoc_insertion_point(field_set:ddb.ExecuteTree.root)
}

// repeated .ddb.ExecuteNode Nodes = 3;
inline int ExecuteTree::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int ExecuteTree::nodes_size() const {
  return _internal_nodes_size();
}
inline void ExecuteTree::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::ddb::ExecuteNode* ExecuteTree::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:ddb.ExecuteTree.Nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::ExecuteNode >*
ExecuteTree::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:ddb.ExecuteTree.Nodes)
  return &_impl_.nodes_;
}
inline const ::ddb::ExecuteNode& ExecuteTree::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::ddb::ExecuteNode& ExecuteTree::nodes(int index) const {
  // @@protoc_insertion_point(field_get:ddb.ExecuteTree.Nodes)
  return _internal_nodes(index);
}
inline ::ddb::ExecuteNode* ExecuteTree::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::ddb::ExecuteNode* ExecuteTree::add_nodes() {
  ::ddb::ExecuteNode* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:ddb.ExecuteTree.Nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ddb::ExecuteNode >&
ExecuteTree::nodes() const {
  // @@protoc_insertion_point(field_list:ddb.ExecuteTree.Nodes)
  return _impl_.nodes_;
}

// -------------------------------------------------------------------

// ResultPath

// string src_path = 1;
inline void ResultPath::clear_src_path() {
  _impl_.src_path_.ClearToEmpty();
}
inline const std::string& ResultPath::src_path() const {
  // @@protoc_insertion_point(field_get:ddb.ResultPath.src_path)
  return _internal_src_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultPath::set_src_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.src_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ddb.ResultPath.src_path)
}
inline std::string* ResultPath::mutable_src_path() {
  std::string* _s = _internal_mutable_src_path();
  // @@protoc_insertion_point(field_mutable:ddb.ResultPath.src_path)
  return _s;
}
inline const std::string& ResultPath::_internal_src_path() const {
  return _impl_.src_path_.Get();
}
inline void ResultPath::_internal_set_src_path(const std::string& value) {
  
  _impl_.src_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultPath::_internal_mutable_src_path() {
  
  return _impl_.src_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultPath::release_src_path() {
  // @@protoc_insertion_point(field_release:ddb.ResultPath.src_path)
  return _impl_.src_path_.Release();
}
inline void ResultPath::set_allocated_src_path(std::string* src_path) {
  if (src_path != nullptr) {
    
  } else {
    
  }
  _impl_.src_path_.SetAllocated(src_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.src_path_.IsDefault()) {
    _impl_.src_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ddb.ResultPath.src_path)
}

// string target_path = 2;
inline void ResultPath::clear_target_path() {
  _impl_.target_path_.ClearToEmpty();
}
inline const std::string& ResultPath::target_path() const {
  // @@protoc_insertion_point(field_get:ddb.ResultPath.target_path)
  return _internal_target_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultPath::set_target_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ddb.ResultPath.target_path)
}
inline std::string* ResultPath::mutable_target_path() {
  std::string* _s = _internal_mutable_target_path();
  // @@protoc_insertion_point(field_mutable:ddb.ResultPath.target_path)
  return _s;
}
inline const std::string& ResultPath::_internal_target_path() const {
  return _impl_.target_path_.Get();
}
inline void ResultPath::_internal_set_target_path(const std::string& value) {
  
  _impl_.target_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultPath::_internal_mutable_target_path() {
  
  return _impl_.target_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultPath::release_target_path() {
  // @@protoc_insertion_point(field_release:ddb.ResultPath.target_path)
  return _impl_.target_path_.Release();
}
inline void ResultPath::set_allocated_target_path(std::string* target_path) {
  if (target_path != nullptr) {
    
  } else {
    
  }
  _impl_.target_path_.SetAllocated(target_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_path_.IsDefault()) {
    _impl_.target_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ddb.ResultPath.target_path)
}

// -------------------------------------------------------------------

// ResultSet

// bytes data = 1;
inline void ResultSet::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& ResultSet::data() const {
  // @@protoc_insertion_point(field_get:ddb.ResultSet.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultSet::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ddb.ResultSet.data)
}
inline std::string* ResultSet::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ddb.ResultSet.data)
  return _s;
}
inline const std::string& ResultSet::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ResultSet::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ResultSet::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ResultSet::release_data() {
  // @@protoc_insertion_point(field_release:ddb.ResultSet.data)
  return _impl_.data_.Release();
}
inline void ResultSet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ddb.ResultSet.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ddb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ddb_2eproto
