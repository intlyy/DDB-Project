// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddb.proto

#include "ddb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ddb {
PROTOBUF_CONSTEXPR QueryNode::QueryNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_._children_cached_byte_size_)*/{0}
  , /*decltype(_impl_.sql_statement_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.parent_)*/0
  , /*decltype(_impl_.site_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNodeDefaultTypeInternal() {}
  union {
    QueryNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNodeDefaultTypeInternal _QueryNode_default_instance_;
PROTOBUF_CONSTEXPR QueryTree::QueryTree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.tree_id_)*/0
  , /*decltype(_impl_.root_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTreeDefaultTypeInternal() {}
  union {
    QueryTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTreeDefaultTypeInternal _QueryTree_default_instance_;
PROTOBUF_CONSTEXPR ExecuteNode::ExecuteNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_._children_cached_byte_size_)*/{0}
  , /*decltype(_impl_.res_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vol_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.parent_)*/0
  , /*decltype(_impl_.time_spend_)*/0
  , /*decltype(_impl_.site_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteNodeDefaultTypeInternal() {}
  union {
    ExecuteNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteNodeDefaultTypeInternal _ExecuteNode_default_instance_;
PROTOBUF_CONSTEXPR ExecuteTree::ExecuteTree(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_.tree_id_)*/0
  , /*decltype(_impl_.root_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteTreeDefaultTypeInternal() {}
  union {
    ExecuteTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteTreeDefaultTypeInternal _ExecuteTree_default_instance_;
PROTOBUF_CONSTEXPR ResultPath::ResultPath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultPathDefaultTypeInternal() {}
  union {
    ResultPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultPathDefaultTypeInternal _ResultPath_default_instance_;
PROTOBUF_CONSTEXPR ResultSet::ResultSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultSetDefaultTypeInternal() {}
  union {
    ResultSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultSetDefaultTypeInternal _ResultSet_default_instance_;
}  // namespace ddb
static ::_pb::Metadata file_level_metadata_ddb_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ddb_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ddb_2eproto = nullptr;

const uint32_t TableStruct_ddb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddb::QueryNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ddb::QueryNode, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ddb::QueryNode, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::ddb::QueryNode, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::ddb::QueryNode, _impl_.sql_statement_),
  PROTOBUF_FIELD_OFFSET(::ddb::QueryNode, _impl_.site_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddb::QueryTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ddb::QueryTree, _impl_.tree_id_),
  PROTOBUF_FIELD_OFFSET(::ddb::QueryTree, _impl_.root_),
  PROTOBUF_FIELD_OFFSET(::ddb::QueryTree, _impl_.nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _impl_.vol_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _impl_.res_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _impl_.site_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteNode, _impl_.time_spend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteTree, _impl_.tree_id_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteTree, _impl_.root_),
  PROTOBUF_FIELD_OFFSET(::ddb::ExecuteTree, _impl_.nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddb::ResultPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ddb::ResultPath, _impl_.src_path_),
  PROTOBUF_FIELD_OFFSET(::ddb::ResultPath, _impl_.target_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ddb::ResultSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ddb::ResultSet, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ddb::QueryNode)},
  { 11, -1, -1, sizeof(::ddb::QueryTree)},
  { 20, -1, -1, sizeof(::ddb::ExecuteNode)},
  { 33, -1, -1, sizeof(::ddb::ExecuteTree)},
  { 42, -1, -1, sizeof(::ddb::ResultPath)},
  { 50, -1, -1, sizeof(::ddb::ResultSet)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ddb::_QueryNode_default_instance_._instance,
  &::ddb::_QueryTree_default_instance_._instance,
  &::ddb::_ExecuteNode_default_instance_._instance,
  &::ddb::_ExecuteTree_default_instance_._instance,
  &::ddb::_ResultPath_default_instance_._instance,
  &::ddb::_ResultSet_default_instance_._instance,
};

const char descriptor_table_protodef_ddb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tddb.proto\022\003ddb\"^\n\tQueryNode\022\n\n\002id\030\001 \001("
  "\005\022\020\n\010children\030\002 \003(\005\022\016\n\006parent\030\003 \001(\005\022\025\n\rs"
  "ql_statement\030\004 \001(\t\022\014\n\004site\030\005 \001(\005\"I\n\tQuer"
  "yTree\022\017\n\007tree_id\030\001 \001(\005\022\014\n\004root\030\002 \001(\005\022\035\n\005"
  "Nodes\030\003 \003(\0132\016.ddb.QueryNode\"w\n\013ExecuteNo"
  "de\022\n\n\002id\030\001 \001(\005\022\013\n\003vol\030\002 \001(\003\022\013\n\003res\030\003 \001(\t"
  "\022\020\n\010children\030\004 \003(\005\022\016\n\006parent\030\005 \001(\005\022\014\n\004si"
  "te\030\006 \001(\005\022\022\n\ntime_spend\030\007 \001(\001\"M\n\013ExecuteT"
  "ree\022\017\n\007tree_id\030\001 \001(\005\022\014\n\004root\030\002 \001(\005\022\037\n\005No"
  "des\030\003 \003(\0132\020.ddb.ExecuteNode\"3\n\nResultPat"
  "h\022\020\n\010src_path\030\001 \001(\t\022\023\n\013target_path\030\002 \001(\t"
  "\"\031\n\tResultSet\022\014\n\004data\030\001 \001(\0142z\n\014CallRemot"
  "eDB\0222\n\014RemoteSelect\022\016.ddb.QueryTree\032\020.dd"
  "b.ExecuteTree\"\000\0226\n\017RemoteFetchFile\022\017.ddb"
  ".ResultPath\032\016.ddb.ResultSet\"\0000\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ddb_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ddb_2eproto = {
    false, false, 599, descriptor_table_protodef_ddb_2eproto,
    "ddb.proto",
    &descriptor_table_ddb_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_ddb_2eproto::offsets,
    file_level_metadata_ddb_2eproto, file_level_enum_descriptors_ddb_2eproto,
    file_level_service_descriptors_ddb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ddb_2eproto_getter() {
  return &descriptor_table_ddb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ddb_2eproto(&descriptor_table_ddb_2eproto);
namespace ddb {

// ===================================================================

class QueryNode::_Internal {
 public:
};

QueryNode::QueryNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ddb.QueryNode)
}
QueryNode::QueryNode(const QueryNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.parent_){}
    , decltype(_impl_.site_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sql_statement().empty()) {
    _this->_impl_.sql_statement_.Set(from._internal_sql_statement(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.site_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.site_));
  // @@protoc_insertion_point(copy_constructor:ddb.QueryNode)
}

inline void QueryNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.sql_statement_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.parent_){0}
    , decltype(_impl_.site_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sql_statement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sql_statement_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryNode::~QueryNode() {
  // @@protoc_insertion_point(destructor:ddb.QueryNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedField();
  _impl_.sql_statement_.Destroy();
}

void QueryNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ddb.QueryNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.sql_statement_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.site_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.site_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sql_statement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sql_statement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ddb.QueryNode.sql_statement"));
        } else
          goto handle_unusual;
        continue;
      // int32 site = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.site_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddb.QueryNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // repeated int32 children = 2;
  {
    int byte_size = _impl_._children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_children(), byte_size, target);
    }
  }

  // int32 parent = 3;
  if (this->_internal_parent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_parent(), target);
  }

  // string sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sql_statement().data(), static_cast<int>(this->_internal_sql_statement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ddb.QueryNode.sql_statement");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sql_statement(), target);
  }

  // int32 site = 5;
  if (this->_internal_site() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_site(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddb.QueryNode)
  return target;
}

size_t QueryNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddb.QueryNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 children = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.children_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string sql_statement = 4;
  if (!this->_internal_sql_statement().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sql_statement());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 parent = 3;
  if (this->_internal_parent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent());
  }

  // int32 site = 5;
  if (this->_internal_site() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_site());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNode::GetClassData() const { return &_class_data_; }


void QueryNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNode*>(&to_msg);
  auto& from = static_cast<const QueryNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ddb.QueryNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal_sql_statement().empty()) {
    _this->_internal_set_sql_statement(from._internal_sql_statement());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_parent() != 0) {
    _this->_internal_set_parent(from._internal_parent());
  }
  if (from._internal_site() != 0) {
    _this->_internal_set_site(from._internal_site());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNode::CopyFrom(const QueryNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddb.QueryNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNode::IsInitialized() const {
  return true;
}

void QueryNode::InternalSwap(QueryNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sql_statement_, lhs_arena,
      &other->_impl_.sql_statement_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryNode, _impl_.site_)
      + sizeof(QueryNode::_impl_.site_)
      - PROTOBUF_FIELD_OFFSET(QueryNode, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddb_2eproto_getter, &descriptor_table_ddb_2eproto_once,
      file_level_metadata_ddb_2eproto[0]);
}

// ===================================================================

class QueryTree::_Internal {
 public:
};

QueryTree::QueryTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ddb.QueryTree)
}
QueryTree::QueryTree(const QueryTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.tree_id_){}
    , decltype(_impl_.root_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tree_id_, &from._impl_.tree_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.root_) -
    reinterpret_cast<char*>(&_impl_.tree_id_)) + sizeof(_impl_.root_));
  // @@protoc_insertion_point(copy_constructor:ddb.QueryTree)
}

inline void QueryTree::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.tree_id_){0}
    , decltype(_impl_.root_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTree::~QueryTree() {
  // @@protoc_insertion_point(destructor:ddb.QueryTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
}

void QueryTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTree::Clear() {
// @@protoc_insertion_point(message_clear_start:ddb.QueryTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  ::memset(&_impl_.tree_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.root_) -
      reinterpret_cast<char*>(&_impl_.tree_id_)) + sizeof(_impl_.root_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tree_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tree_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ddb.QueryNode Nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueryTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddb.QueryTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tree_id = 1;
  if (this->_internal_tree_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tree_id(), target);
  }

  // int32 root = 2;
  if (this->_internal_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_root(), target);
  }

  // repeated .ddb.QueryNode Nodes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddb.QueryTree)
  return target;
}

size_t QueryTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddb.QueryTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ddb.QueryNode Nodes = 3;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 tree_id = 1;
  if (this->_internal_tree_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tree_id());
  }

  // int32 root = 2;
  if (this->_internal_root() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_root());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTree::GetClassData() const { return &_class_data_; }


void QueryTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTree*>(&to_msg);
  auto& from = static_cast<const QueryTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ddb.QueryTree)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (from._internal_tree_id() != 0) {
    _this->_internal_set_tree_id(from._internal_tree_id());
  }
  if (from._internal_root() != 0) {
    _this->_internal_set_root(from._internal_root());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTree::CopyFrom(const QueryTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddb.QueryTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTree::IsInitialized() const {
  return true;
}

void QueryTree::InternalSwap(QueryTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryTree, _impl_.root_)
      + sizeof(QueryTree::_impl_.root_)
      - PROTOBUF_FIELD_OFFSET(QueryTree, _impl_.tree_id_)>(
          reinterpret_cast<char*>(&_impl_.tree_id_),
          reinterpret_cast<char*>(&other->_impl_.tree_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddb_2eproto_getter, &descriptor_table_ddb_2eproto_once,
      file_level_metadata_ddb_2eproto[1]);
}

// ===================================================================

class ExecuteNode::_Internal {
 public:
};

ExecuteNode::ExecuteNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ddb.ExecuteNode)
}
ExecuteNode::ExecuteNode(const ExecuteNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.res_){}
    , decltype(_impl_.vol_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.parent_){}
    , decltype(_impl_.time_spend_){}
    , decltype(_impl_.site_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.res_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res().empty()) {
    _this->_impl_.res_.Set(from._internal_res(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vol_, &from._impl_.vol_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.site_) -
    reinterpret_cast<char*>(&_impl_.vol_)) + sizeof(_impl_.site_));
  // @@protoc_insertion_point(copy_constructor:ddb.ExecuteNode)
}

inline void ExecuteNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , /*decltype(_impl_._children_cached_byte_size_)*/{0}
    , decltype(_impl_.res_){}
    , decltype(_impl_.vol_){int64_t{0}}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.parent_){0}
    , decltype(_impl_.time_spend_){0}
    , decltype(_impl_.site_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.res_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteNode::~ExecuteNode() {
  // @@protoc_insertion_point(destructor:ddb.ExecuteNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedField();
  _impl_.res_.Destroy();
}

void ExecuteNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ddb.ExecuteNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.res_.ClearToEmpty();
  ::memset(&_impl_.vol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.site_) -
      reinterpret_cast<char*>(&_impl_.vol_)) + sizeof(_impl_.site_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 vol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_res();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ddb.ExecuteNode.res"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 children = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_children(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_children(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.parent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 site = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.site_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_spend = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.time_spend_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddb.ExecuteNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int64 vol = 2;
  if (this->_internal_vol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_vol(), target);
  }

  // string res = 3;
  if (!this->_internal_res().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res().data(), static_cast<int>(this->_internal_res().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ddb.ExecuteNode.res");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_res(), target);
  }

  // repeated int32 children = 4;
  {
    int byte_size = _impl_._children_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_children(), byte_size, target);
    }
  }

  // int32 parent = 5;
  if (this->_internal_parent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_parent(), target);
  }

  // int32 site = 6;
  if (this->_internal_site() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_site(), target);
  }

  // double time_spend = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_spend = this->_internal_time_spend();
  uint64_t raw_time_spend;
  memcpy(&raw_time_spend, &tmp_time_spend, sizeof(tmp_time_spend));
  if (raw_time_spend != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_time_spend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddb.ExecuteNode)
  return target;
}

size_t ExecuteNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddb.ExecuteNode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 children = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.children_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._children_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string res = 3;
  if (!this->_internal_res().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res());
  }

  // int64 vol = 2;
  if (this->_internal_vol() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vol());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 parent = 5;
  if (this->_internal_parent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parent());
  }

  // double time_spend = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_spend = this->_internal_time_spend();
  uint64_t raw_time_spend;
  memcpy(&raw_time_spend, &tmp_time_spend, sizeof(tmp_time_spend));
  if (raw_time_spend != 0) {
    total_size += 1 + 8;
  }

  // int32 site = 6;
  if (this->_internal_site() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_site());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteNode::GetClassData() const { return &_class_data_; }


void ExecuteNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteNode*>(&to_msg);
  auto& from = static_cast<const ExecuteNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ddb.ExecuteNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (!from._internal_res().empty()) {
    _this->_internal_set_res(from._internal_res());
  }
  if (from._internal_vol() != 0) {
    _this->_internal_set_vol(from._internal_vol());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_parent() != 0) {
    _this->_internal_set_parent(from._internal_parent());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_spend = from._internal_time_spend();
  uint64_t raw_time_spend;
  memcpy(&raw_time_spend, &tmp_time_spend, sizeof(tmp_time_spend));
  if (raw_time_spend != 0) {
    _this->_internal_set_time_spend(from._internal_time_spend());
  }
  if (from._internal_site() != 0) {
    _this->_internal_set_site(from._internal_site());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteNode::CopyFrom(const ExecuteNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddb.ExecuteNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteNode::IsInitialized() const {
  return true;
}

void ExecuteNode::InternalSwap(ExecuteNode* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.res_, lhs_arena,
      &other->_impl_.res_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteNode, _impl_.site_)
      + sizeof(ExecuteNode::_impl_.site_)
      - PROTOBUF_FIELD_OFFSET(ExecuteNode, _impl_.vol_)>(
          reinterpret_cast<char*>(&_impl_.vol_),
          reinterpret_cast<char*>(&other->_impl_.vol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddb_2eproto_getter, &descriptor_table_ddb_2eproto_once,
      file_level_metadata_ddb_2eproto[2]);
}

// ===================================================================

class ExecuteTree::_Internal {
 public:
};

ExecuteTree::ExecuteTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ddb.ExecuteTree)
}
ExecuteTree::ExecuteTree(const ExecuteTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteTree* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , decltype(_impl_.tree_id_){}
    , decltype(_impl_.root_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.tree_id_, &from._impl_.tree_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.root_) -
    reinterpret_cast<char*>(&_impl_.tree_id_)) + sizeof(_impl_.root_));
  // @@protoc_insertion_point(copy_constructor:ddb.ExecuteTree)
}

inline void ExecuteTree::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , decltype(_impl_.tree_id_){0}
    , decltype(_impl_.root_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExecuteTree::~ExecuteTree() {
  // @@protoc_insertion_point(destructor:ddb.ExecuteTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
}

void ExecuteTree::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteTree::Clear() {
// @@protoc_insertion_point(message_clear_start:ddb.ExecuteTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  ::memset(&_impl_.tree_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.root_) -
      reinterpret_cast<char*>(&_impl_.tree_id_)) + sizeof(_impl_.root_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 tree_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.tree_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 root = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.root_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .ddb.ExecuteNode Nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddb.ExecuteTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 tree_id = 1;
  if (this->_internal_tree_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tree_id(), target);
  }

  // int32 root = 2;
  if (this->_internal_root() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_root(), target);
  }

  // repeated .ddb.ExecuteNode Nodes = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddb.ExecuteTree)
  return target;
}

size_t ExecuteTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddb.ExecuteTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ddb.ExecuteNode Nodes = 3;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 tree_id = 1;
  if (this->_internal_tree_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tree_id());
  }

  // int32 root = 2;
  if (this->_internal_root() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_root());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteTree::GetClassData() const { return &_class_data_; }


void ExecuteTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteTree*>(&to_msg);
  auto& from = static_cast<const ExecuteTree&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ddb.ExecuteTree)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  if (from._internal_tree_id() != 0) {
    _this->_internal_set_tree_id(from._internal_tree_id());
  }
  if (from._internal_root() != 0) {
    _this->_internal_set_root(from._internal_root());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteTree::CopyFrom(const ExecuteTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddb.ExecuteTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteTree::IsInitialized() const {
  return true;
}

void ExecuteTree::InternalSwap(ExecuteTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteTree, _impl_.root_)
      + sizeof(ExecuteTree::_impl_.root_)
      - PROTOBUF_FIELD_OFFSET(ExecuteTree, _impl_.tree_id_)>(
          reinterpret_cast<char*>(&_impl_.tree_id_),
          reinterpret_cast<char*>(&other->_impl_.tree_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddb_2eproto_getter, &descriptor_table_ddb_2eproto_once,
      file_level_metadata_ddb_2eproto[3]);
}

// ===================================================================

class ResultPath::_Internal {
 public:
};

ResultPath::ResultPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ddb.ResultPath)
}
ResultPath::ResultPath(const ResultPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResultPath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_path_){}
    , decltype(_impl_.target_path_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.src_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_src_path().empty()) {
    _this->_impl_.src_path_.Set(from._internal_src_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_path().empty()) {
    _this->_impl_.target_path_.Set(from._internal_target_path(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ddb.ResultPath)
}

inline void ResultPath::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_path_){}
    , decltype(_impl_.target_path_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.src_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.src_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResultPath::~ResultPath() {
  // @@protoc_insertion_point(destructor:ddb.ResultPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_path_.Destroy();
  _impl_.target_path_.Destroy();
}

void ResultPath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResultPath::Clear() {
// @@protoc_insertion_point(message_clear_start:ddb.ResultPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_path_.ClearToEmpty();
  _impl_.target_path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string src_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ddb.ResultPath.src_path"));
        } else
          goto handle_unusual;
        continue;
      // string target_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_target_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ddb.ResultPath.target_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddb.ResultPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string src_path = 1;
  if (!this->_internal_src_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_path().data(), static_cast<int>(this->_internal_src_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ddb.ResultPath.src_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src_path(), target);
  }

  // string target_path = 2;
  if (!this->_internal_target_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_path().data(), static_cast<int>(this->_internal_target_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ddb.ResultPath.target_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_target_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddb.ResultPath)
  return target;
}

size_t ResultPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddb.ResultPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src_path = 1;
  if (!this->_internal_src_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_path());
  }

  // string target_path = 2;
  if (!this->_internal_target_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultPath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResultPath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultPath::GetClassData() const { return &_class_data_; }


void ResultPath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResultPath*>(&to_msg);
  auto& from = static_cast<const ResultPath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ddb.ResultPath)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src_path().empty()) {
    _this->_internal_set_src_path(from._internal_src_path());
  }
  if (!from._internal_target_path().empty()) {
    _this->_internal_set_target_path(from._internal_target_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultPath::CopyFrom(const ResultPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddb.ResultPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultPath::IsInitialized() const {
  return true;
}

void ResultPath::InternalSwap(ResultPath* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.src_path_, lhs_arena,
      &other->_impl_.src_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_path_, lhs_arena,
      &other->_impl_.target_path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultPath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddb_2eproto_getter, &descriptor_table_ddb_2eproto_once,
      file_level_metadata_ddb_2eproto[4]);
}

// ===================================================================

class ResultSet::_Internal {
 public:
};

ResultSet::ResultSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ddb.ResultSet)
}
ResultSet::ResultSet(const ResultSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResultSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ddb.ResultSet)
}

inline void ResultSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResultSet::~ResultSet() {
  // @@protoc_insertion_point(destructor:ddb.ResultSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResultSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ResultSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResultSet::Clear() {
// @@protoc_insertion_point(message_clear_start:ddb.ResultSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResultSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResultSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ddb.ResultSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ddb.ResultSet)
  return target;
}

size_t ResultSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ddb.ResultSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResultSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResultSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResultSet::GetClassData() const { return &_class_data_; }


void ResultSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResultSet*>(&to_msg);
  auto& from = static_cast<const ResultSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ddb.ResultSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResultSet::CopyFrom(const ResultSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ddb.ResultSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultSet::IsInitialized() const {
  return true;
}

void ResultSet::InternalSwap(ResultSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResultSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ddb_2eproto_getter, &descriptor_table_ddb_2eproto_once,
      file_level_metadata_ddb_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ddb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ddb::QueryNode*
Arena::CreateMaybeMessage< ::ddb::QueryNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddb::QueryNode >(arena);
}
template<> PROTOBUF_NOINLINE ::ddb::QueryTree*
Arena::CreateMaybeMessage< ::ddb::QueryTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddb::QueryTree >(arena);
}
template<> PROTOBUF_NOINLINE ::ddb::ExecuteNode*
Arena::CreateMaybeMessage< ::ddb::ExecuteNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddb::ExecuteNode >(arena);
}
template<> PROTOBUF_NOINLINE ::ddb::ExecuteTree*
Arena::CreateMaybeMessage< ::ddb::ExecuteTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddb::ExecuteTree >(arena);
}
template<> PROTOBUF_NOINLINE ::ddb::ResultPath*
Arena::CreateMaybeMessage< ::ddb::ResultPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddb::ResultPath >(arena);
}
template<> PROTOBUF_NOINLINE ::ddb::ResultSet*
Arena::CreateMaybeMessage< ::ddb::ResultSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ddb::ResultSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
