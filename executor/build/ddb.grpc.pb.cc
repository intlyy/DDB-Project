// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ddb.proto

#include "ddb.pb.h"
#include "ddb.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace ddb {

static const char* CallRemoteDB_method_names[] = {
  "/ddb.CallRemoteDB/RemoteSelect",
  "/ddb.CallRemoteDB/RemoteFetchFile",
};

std::unique_ptr< CallRemoteDB::Stub> CallRemoteDB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CallRemoteDB::Stub> stub(new CallRemoteDB::Stub(channel, options));
  return stub;
}

CallRemoteDB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_RemoteSelect_(CallRemoteDB_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoteFetchFile_(CallRemoteDB_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CallRemoteDB::Stub::RemoteSelect(::grpc::ClientContext* context, const ::ddb::QueryTree& request, ::ddb::ExecuteTree* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ddb::QueryTree, ::ddb::ExecuteTree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RemoteSelect_, context, request, response);
}

void CallRemoteDB::Stub::async::RemoteSelect(::grpc::ClientContext* context, const ::ddb::QueryTree* request, ::ddb::ExecuteTree* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ddb::QueryTree, ::ddb::ExecuteTree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoteSelect_, context, request, response, std::move(f));
}

void CallRemoteDB::Stub::async::RemoteSelect(::grpc::ClientContext* context, const ::ddb::QueryTree* request, ::ddb::ExecuteTree* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RemoteSelect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ddb::ExecuteTree>* CallRemoteDB::Stub::PrepareAsyncRemoteSelectRaw(::grpc::ClientContext* context, const ::ddb::QueryTree& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ddb::ExecuteTree, ::ddb::QueryTree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RemoteSelect_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ddb::ExecuteTree>* CallRemoteDB::Stub::AsyncRemoteSelectRaw(::grpc::ClientContext* context, const ::ddb::QueryTree& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRemoteSelectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::ddb::ResultSet>* CallRemoteDB::Stub::RemoteFetchFileRaw(::grpc::ClientContext* context, const ::ddb::ResultPath& request) {
  return ::grpc::internal::ClientReaderFactory< ::ddb::ResultSet>::Create(channel_.get(), rpcmethod_RemoteFetchFile_, context, request);
}

void CallRemoteDB::Stub::async::RemoteFetchFile(::grpc::ClientContext* context, const ::ddb::ResultPath* request, ::grpc::ClientReadReactor< ::ddb::ResultSet>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::ddb::ResultSet>::Create(stub_->channel_.get(), stub_->rpcmethod_RemoteFetchFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::ddb::ResultSet>* CallRemoteDB::Stub::AsyncRemoteFetchFileRaw(::grpc::ClientContext* context, const ::ddb::ResultPath& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ddb::ResultSet>::Create(channel_.get(), cq, rpcmethod_RemoteFetchFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ddb::ResultSet>* CallRemoteDB::Stub::PrepareAsyncRemoteFetchFileRaw(::grpc::ClientContext* context, const ::ddb::ResultPath& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ddb::ResultSet>::Create(channel_.get(), cq, rpcmethod_RemoteFetchFile_, context, request, false, nullptr);
}

CallRemoteDB::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallRemoteDB_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CallRemoteDB::Service, ::ddb::QueryTree, ::ddb::ExecuteTree, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CallRemoteDB::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ddb::QueryTree* req,
             ::ddb::ExecuteTree* resp) {
               return service->RemoteSelect(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CallRemoteDB_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CallRemoteDB::Service, ::ddb::ResultPath, ::ddb::ResultSet>(
          [](CallRemoteDB::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ddb::ResultPath* req,
             ::grpc::ServerWriter<::ddb::ResultSet>* writer) {
               return service->RemoteFetchFile(ctx, req, writer);
             }, this)));
}

CallRemoteDB::Service::~Service() {
}

::grpc::Status CallRemoteDB::Service::RemoteSelect(::grpc::ServerContext* context, const ::ddb::QueryTree* request, ::ddb::ExecuteTree* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CallRemoteDB::Service::RemoteFetchFile(::grpc::ServerContext* context, const ::ddb::ResultPath* request, ::grpc::ServerWriter< ::ddb::ResultSet>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ddb

